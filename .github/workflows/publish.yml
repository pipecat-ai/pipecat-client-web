name: Bump and Publish

on:
  workflow_dispatch:
    inputs:
      client:
        description: 'Which client to build and publish'
        required: true
        type: choice
        options:
          - client-js
          - client-react
      version_type:
        description: 'Version type to bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - rc

jobs:
  bump-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci --include=dev

      - name: Get version for selected client
        id: package_version
        run: |
          cd ${{ github.event.inputs.client }}
          if [ "${{ github.event.inputs.version_type }}" = "rc" ]; then
            # For RC, bump the version first
            npm version prerelease --preid=rc
          fi
          echo "current-version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          echo "package-name=$(node -p "require('./package.json').name")" >> $GITHUB_OUTPUT

      - name: Build selected client
        run: |
          cd ${{ github.event.inputs.client }}
          npm run build

      - name: Publish selected client to NPM
        run: |
          cd ${{ github.event.inputs.client }}
          if [ "${{ github.event.inputs.version_type }}" = "rc" ]; then
            npm publish --tag dev
          else
            npm publish --tag latest
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: github.event.inputs.version_type != 'rc'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.package_version.outputs.package-name }}@v${{ steps.package_version.outputs.current-version }}
          release_name: Release ${{ steps.package_version.outputs.package-name }}@v${{ steps.package_version.outputs.current-version }}
          draft: false
          prerelease: false